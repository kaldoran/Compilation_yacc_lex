#!/usr/bin/cpyrr
# -*- coding: utf-8 -*-

% TESTS_STRUCTURES_ET_TABLEAUX %

# Un Point
type Point :
  struct
    x : int;
    y : int;
  end struct;

# Une liste de 50 points
type List : array[0..50] of Point;

# Un ensemble contient le nombre de points courants 
# + la liste correspondante
type ensemble : 
  struct
    size : int;
    content : List;
  end struct;

# Données
var valeurs : ensemble;

# Remplir aléatoirement un type ensemble
proc remplir(ensemble : v)
  var i : int;
  start
  {
    v.size = 0;

    for(i = 0; i < 50; i++) do {
      v[i].x = rand() * 101;
      v[i].y = rand() * 101;
      v.size += sqrt(v[i].x * v[i].x + v[i].y * v[i].y);
    }
 
    return;
  };

# Affichage de l'ensemble
proc afficher()
  var i : int;
  start
  { 
    write("Size: %d\n", v.size);

    for(i = 0; i < 50;) do {
      write("(%d, %d)", v[i].x, v[i].y); 

      if (i++) == 49 then { write("\n"); }
      else { write(","); }
    }

    return;
  };

# Recherche une coordonnée
function search_point(x : int, y : int) return bool
  var i : int;
  start
  {
    for(i = 0; i < 50;) do {
      if v[i].x == x and v[i].y == y then {
        return true;
      }
    } 
    
    return false;
  };

# Je cherche moi-même l'utilité de cette fonction...
function machin_bidule(x : int) return int
  proc truc(y : int)
    var k : int;
   
    proc mise_k_0
      start
      {
        k = 0;
      };

    proc get_k 
      start
      {
        read(k);
      };

    start
    {
      write("%d\n", y);
      
      if y then {
        mise_k_0();
      }
      else {
        get_k();
      }
    };
  
  var p : int;

  start
  {
    truc(x * 100);
    x++;
    return x;
  };


# Programme
start
{
 ; # Pour la peine, on ne fait rien
}
